import { defineField, defineType } from 'sanity'

export const olyArticle = defineType({
  name: 'olyArticle',
  title: 'Oly Article',
  type: 'document',
  fields: [
    defineField({
      name: 'articleId',
      title: 'Article ID',
      type: 'string',
      description: 'Unique identifier for the article (id parameter)',
      validation: Rule => Rule.required().error('Article ID is required'),
    }),
    defineField({
      name: 'author',
      title: 'Author',
      type: 'string',
      description: 'Article author or creator',
    }),
    defineField({
      name: 'title',
      title: 'Title',
      type: 'string',
      description: 'Title of the news article, searchable via q or qInTitle',
      validation: Rule => Rule.required().max(512).error('Title is required and must be 512 characters or less'),
    }),
    defineField({
      name: 'keywords',
      title: 'Keywords',
      type: 'array',
      of: [{ type: 'string' }],
      description: 'Searchable keywords for the article, derived from q parameter',
      validation: Rule => Rule.max(512).error('Keywords must be 512 characters or less in total'),
    }),
    defineField({
      name: 'content',
      title: 'Content',
      type: 'array',
      of: [{ type: 'block' }],
      description: 'Article content snippet, searchable via q, as Portable Text',
      validation: Rule => Rule.required().error('Content is required'),
    }),
    defineField({
      name: 'fullContent',
      title: 'Full Content',
      type: 'array',
      of: [{ type: 'block' }],
      description: 'Full article content, included if full_content=1, as Portable Text',
    }),
    defineField({
      name: 'url',
      title: 'URL',
      type: 'url',
      description: 'Article URL, searchable via q or qInMeta',
      validation: Rule => Rule.required().error('URL is required'),
    }),
    defineField({
      name: 'metaKeywords',
      title: 'Meta Keywords',
      type: 'array',
      of: [{ type: 'string' }],
      description: 'Meta keywords, searchable via q or qInMeta',
      validation: Rule => Rule.max(512).error('Meta keywords must be 512 characters or less in total'),
    }),
    defineField({
      name: 'metaDescription',
      title: 'Meta Description',
      type: 'text',
      description: 'Meta description, searchable via q or qInMeta',
      validation: Rule => Rule.max(512).error('Meta description must be 512 characters or less'),
    }),
    defineField({
      name: 'pubDate',
      title: 'Publication Date',
      type: 'datetime',
      description: 'Publication date, filterable via from_date, to_date, and timeframe',
      validation: Rule => Rule.required().error('Publication date is required'),
    }),
    defineField({
      name: 'fromDate',
      title: 'From Date',
      type: 'datetime',
      description: 'Earliest date for article relevance, from from_date parameter',
    }),
    defineField({
      name: 'toDate',
      title: 'To Date',
      type: 'datetime',
      description: 'Latest date for article relevance, from to_date parameter',
    }),
    defineField({
      name: 'timezone',
      title: 'Timezone',
      type: 'string',
      description: 'Timezone of publication date, e.g., America/New_York',
    }),
    defineField({
      name: 'language',
      title: 'Language',
      type: 'array',
      of: [{ type: 'string' }],
      description: 'Languages of the article, up to 5, e.g., fr, en',
      validation: Rule => Rule.max(5).error('Maximum 5 languages allowed'),
    }),
    defineField({
      name: 'coins',
      title: 'Coins',
      type: 'array',
      of: [{ type: 'string' }],
      description: 'Associated crypto coins, up to 5, e.g., btc, eth',
      validation: Rule => Rule.max(5).error('Maximum 5 coins allowed'),
    }),
    defineField({
      name: 'tags',
      title: 'Tags',
      type: 'array',
      of: [{ type: 'string' }],
      description: 'AI-classified tags, up to 5, e.g., blockchain',
      validation: Rule => Rule.max(5).error('Maximum 5 tags allowed'),
    }),
    defineField({
      name: 'sentiment',
      title: 'Sentiment',
      type: 'string',
      description: 'Sentiment of the article (positive, negative, neutral)',
      options: {
        list: [
          { title: 'Positive', value: 'positive' },
          { title: 'Negative', value: 'negative' },
          { title: 'Neutral', value: 'neutral' },
        ],
      },
      validation: Rule =>
        Rule.custom(value => !value || ['positive', 'negative', 'neutral'].includes(value) || 'Sentiment must be positive, negative, or neutral'),
    }),
    defineField({
      name: 'domain',
      title: 'Domain',
      type: 'array',
      of: [{ type: 'string' }],
      description: 'Source domains, up to 5, e.g., nytimes, bbc',
      validation: Rule => Rule.max(5).error('Maximum 5 domains allowed'),
    }),
    defineField({
      name: 'domainUrl',
      title: 'Domain URL',
      type: 'array',
      of: [{ type: 'url' }],
      description: 'Source domain URLs, up to 5, e.g., nytimes.com',
      validation: Rule => Rule.max(5).error('Maximum 5 domain URLs allowed'),
    }),

    // âœ… Newly Added Source Fields
    defineField({
      name: 'sourceId',
      title: 'Source ID',
      type: 'string',
      description: 'Unique source identifier from NewsData.io (source_id)',
    }),
    defineField({
      name: 'sourceUrl',
      title: 'Source URL',
      type: 'url',
      description: 'Base website URL of the source (source_url)',
    }),
    defineField({
      name: 'sourceIcon',
      title: 'Source Icon',
      type: 'url',
      description: 'Favicon or logo URL of the source (source_icon)',
    }),

    defineField({
      name: 'excludedDomain',
      title: 'Excluded Domain',
      type: 'array',
      of: [{ type: 'string' }],
      description: 'Domains to exclude, up to 5, e.g., nytimes.com',
      validation: Rule => Rule.max(5).error('Maximum 5 excluded domains allowed'),
    }),
    defineField({
      name: 'priorityDomain',
      title: 'Priority Domain',
      type: 'string',
      description: 'Priority level of domains (top, medium, low)',
      options: {
        list: [
          { title: 'Top', value: 'top' },
          { title: 'Medium', value: 'medium' },
          { title: 'Low', value: 'low' },
        ],
      },
      validation: Rule =>
        Rule.custom(value => !value || ['top', 'medium', 'low'].includes(value) || 'Priority must be top, medium, or low'),
    }),
    defineField({
      name: 'hasImage',
      title: 'Has Image',
      type: 'boolean',
      description: 'Indicates if article has a featured image (true if image=1, false if image=0)',
    }),
    defineField({
      name: 'imageUrl',
      title: 'Image URL',
      type: 'url',
      description: 'URL of the featured image',
    }),
    defineField({
      name: 'hasVideo',
      title: 'Has Video',
      type: 'boolean',
      description: 'Indicates if article has a video (true if video=1, false if video=0)',
    }),
    defineField({
      name: 'videoUrl',
      title: 'Video URL',
      type: 'url',
      description: 'URL of the embedded video',
    }),
    defineField({
      name: 'isDuplicateRemoved',
      title: 'Duplicate Removed',
      type: 'boolean',
      description: 'Indicates if article is filtered as non-duplicate (true if removeduplicate=1)',
    }),
    defineField({
      name: 'category',
      title: 'Category',
      type: 'string',
      description: 'Article category from NewsData.io API',
      validation: Rule => Rule.required().error('Category is required'),
    }),
  ],
})
